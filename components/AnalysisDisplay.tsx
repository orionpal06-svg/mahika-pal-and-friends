
import React from 'react';
import type { AnalysisResult, Patient } from '../types';

interface AnalysisDisplayProps {
  result: AnalysisResult;
  patient: Patient;
  onReset: () => void;
}

const CalendarIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

const DoctorIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="1.5">
        <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
    </svg>
);

const WarningIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
    <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
  </svg>
);

const CheckCircleIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

const PillIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" d="M6.429 9.75L2.25 12l4.179 2.25m0-4.5l5.571 3 5.571-3m-11.142 0L2.25 12l4.179 2.25M6.429 9.75L12 12.75l5.571-3M6.429 9.75L12 6.75l5.571 3m0 0l4.179 2.25L12 15.75l-4.179-2.25m11.142 0l4.179 2.25L17.571 12l-5.571 3.001" />
    </svg>
);


const AnalysisDisplay: React.FC<AnalysisDisplayProps> = ({ result, patient, onReset }) => {
  const isSevere = result.symptomSeverity === 'Severe';

  const SeverityCard = () => (
    <div>
        <h3 className="text-lg font-semibold text-gray-800 mb-2">Severity Assessment</h3>
        {isSevere ? (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex items-center">
                <WarningIcon className="h-8 w-8 text-red-500 mr-3 flex-shrink-0"/>
                <div>
                <p className="font-bold text-red-700 text-lg">Severe</p>
                <p className="text-red-600 text-sm">Based on the symptoms, immediate attention may be advised. Please follow the urgent care instructions below.</p>
                </div>
            </div>
            </div>
        ) : (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-center">
                <CheckCircleIcon className="h-8 w-8 text-green-500 mr-3 flex-shrink-0"/>
                <div>
                    <p className="font-bold text-green-700 text-lg">Not Severe</p>
                    <p className="text-green-600 text-sm">The symptoms do not appear to indicate a severe condition, but consulting with a doctor is always recommended.</p>
                </div>
            </div>
            </div>
        )}
    </div>
  );

  return (
    <div className="bg-white p-6 md:p-8 rounded-xl shadow-lg border border-gray-200 animate-fade-in">
      <div className="text-center border-b pb-4 mb-6">
        <h2 className="text-2xl font-bold text-primary">Health Analysis for {patient.name}</h2>
        <p className="text-gray-500 mt-1">Here are the insights generated by our AI.</p>
      </div>

      <div className="space-y-8">
        <div>
          <h3 className="text-lg font-semibold text-gray-800 mb-2">Symptom Analysis</h3>
          <p className="text-gray-600 bg-gray-50 p-4 rounded-lg border">{result.analysis}</p>
        </div>

        <SeverityCard />

        {isSevere ? (
          <div>
             <h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center">
                <WarningIcon className="h-6 w-6 mr-2 text-red-500" />
                Urgent Care Instructions
            </h3>
            <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                <p className="text-red-700">{result.urgentCareInstructions}</p>
            </div>
            <a
                href="https://www.google.com/maps/search/?api=1&query=hospital"
                target="_blank"
                rel="noopener noreferrer"
                className="mt-6 w-full block text-center px-8 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
            >
                Find Nearest Hospital Now
            </a>
          </div>
        ) : (
          <>
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center">
                <PillIcon className="h-6 w-6 mr-2 text-secondary" />
                Suggested Medications
              </h3>
              <ul className="space-y-3">
                {result.suggestedMedications?.map((med, index) => (
                    <li key={index} className="p-4 bg-gray-50 border rounded-lg">
                        <p className="font-semibold text-primary">{med.name}</p>
                        <p className="text-sm text-gray-600">{med.dosage}</p>
                    </li>
                ))}
              </ul>
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center">
                <DoctorIcon className="h-6 w-6 mr-2 text-secondary" />
                Suggested Specialist
              </h3>
              <p className="text-lg font-medium text-secondary bg-blue-50 p-4 rounded-lg border border-blue-200">{result.doctorSuggestion}</p>
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                <CalendarIcon className="h-6 w-6 mr-2 text-secondary" />
                Suggested Appointments
              </h3>
              <div className="grid sm:grid-cols-3 gap-4">
                {result.suggestedAppointments?.map((appt, index) => (
                  <div key={index} className="bg-white border-2 border-accent rounded-lg p-4 text-center hover:shadow-md hover:border-secondary transition-all">
                    <p className="font-semibold text-primary">{appt.date}</p>
                    <p className="text-gray-600">{appt.time}</p>
                  </div>
                ))}
              </div>
            </div>
          </>
        )}

        <div className="pt-6 border-t">
          <p className="text-xs text-gray-500 text-center italic">{result.disclaimer}</p>
        </div>
      </div>
      
      <div className="mt-8 text-center">
        <button
          onClick={onReset}
          className="w-full md:w-auto inline-flex justify-center items-center px-8 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-secondary hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-secondary transition-colors"
        >
          Start a New Analysis
        </button>
      </div>
    </div>
  );
};

export default AnalysisDisplay;